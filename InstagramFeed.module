<?php namespace ProcessWire;

/**
 * InstagramFeed
 *
 * See README.md for usage instructions.
 *
 * ProcessWire 3.x
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 *
 * @author Tabea David <info@justonestep.de>
 * @version 1.0.2
 * @copyright Copyright (c) 2016 justonestep.de, <info@justonestep.de>
 * @see https://github.com/justonestep/processwire-instagramfeed
 * @see http://www.processwire.com
 */

/**
 * Class InstagramFeed
 */
class InstagramFeed extends WireData implements Module, ConfigurableModule {

  const MODULE = 'InstagramFeed';

  const API_URL_AUTHORIZE = 'https://api.instagram.com/oauth/authorize/';
  const API_URL_FEED = 'https://api.instagram.com/v1/users/self/media/recent/';
  const API_URL_ACCESS_TOKEN = 'https://api.instagram.com/oauth/access_token/';
  const API_URL_SEARCH = 'https://api.instagram.com/v1/users/search/';
  const API_URL_SEARCH_TAGS = 'https://api.instagram.com/v1/tags/%s/media/recent/';
  const API_URL_MEDIA_COMMENT = 'https://api.instagram.com/v1/media/%s/comments/';

  /**
   * Retrieves module meta data
   * Implementation of the Module interface
   *
   * @return array
   * @see http://processwire.com/apigen/class-Module.html
   */
  public static function getModuleInfo() {
    return array(
      'title' => 'Instagram Feed',
      'summary' => 'Represents an instagram feed',
      'version' => 102,
      'href' => 'https://github.com/justonestep/processwire-instagramfeed ',
      'singular' => true,
      'autoload' => true,
      'icon' => 'instagram'
    );
  }

  /**
   * @field array Default config values
   */
  protected static $defaults = array(
    'clientId' => '',
    'clientSecret' => '',
    'accessToken' => '',
    'username' => '',
    'imageCount' => 4,
    'cacheExpire' => 'daily'
  );

  /**
   * Retrieves the list of config input fields
   *
   * Implementation of the ConfigurableModule interface
   *
   * @param array $data The config data
   * @return InputfieldWrapper
   * @see http://processwire.com/apigen/class-ConfigurableModule.html
   */
  public static function getModuleConfigInputfields(array $data) {
    $data = array_merge(self::$defaults, $data);
    $fields = new InputfieldWrapper();
    $modules = wire('modules');

    $help = $modules->get('InputfieldMarkup');
    $link = $modules->get(self::MODULE)->getCode();
    $helpContent = <<<EOD
<h2>Instructions:</h2>
<ol>
<li>Register a new instagram Client: <a href="https://instagram.com/developer/clients/manage/">at instagram</a>. <strong>It's really important to add the current url as redirect url. (For example "http://page.dev/processwire/module/edit?name=InstagramFeed/")</strong></li>
<li>Complete the form below, leaving the access input token field empty. This value will be generated. Click submit.</li>
<li>Click the following link to generate code and access token: $link</li>
</ol>
<p><a  target="_blank" href="https://github.com/justonestep/processwire-instagramfeed">Read more</a></p>
EOD;
    $help->value = $helpContent;
    $fields->append($help);

    $field = $modules->get('InputfieldText');
    $field->label = __('Client ID');
    $field->description = __('Instagram');
    $field->attr('name', 'clientId');
    $field->attr('size', 40);
    $field->attr('value', $data['clientId']);
    $field->columnWidth = 50;
    $field->required = 1;
    $fields->append($field);

    $field = $modules->get('InputfieldText');
    $field->label = __('Client Secret');
    $field->description = __('Instagram');
    $field->attr('name', 'clientSecret');
    $field->attr('size', 40);
    $field->attr('value', $data['clientSecret']);
    $field->columnWidth = 50;
    $field->required = 1;
    $fields->append($field);

    $field = $modules->get('InputfieldText');
    $field->label = __('Access Token');
    $field->description = __('Will be generated by clicking the link above.');
    $field->attr('name', 'accessToken');
    $field->attr('size', 60);
    $field->attr('value', $data['accessToken']);
    $field->columnWidth = 100;
    $fields->append($field);

    $field = $modules->get('InputfieldText');
    $field->label = __('Username');
    $field->description = __('Instagram username to display content from (default: self).');
    $field->attr('name', 'username');
    $field->attr('size', 40);
    $field->attr('value', $data['username']);
    $field->columnWidth = 50;
    $fields->append($field);

    $field = $modules->get('InputfieldText');
    $field->label = __('Image Count');
    $field->description = __('Count of media to return.');
    $field->attr('name', 'imageCount');
    $field->attr('size', 4);
    $field->attr('value', $data['imageCount']);
    $field->columnWidth = 50;
    $fields->append($field);

    $field = $modules->get('InputfieldSelect');
    $field->label = 'Cache expires';
    $field->description = __('By default a cache lasts for one day. You could select another lifetime.');
    $field->attr('name', 'cacheExpire');
    $field->attr('value', $data['cacheExpire']);
    $field->columnWidth = 100;
    $field->required = 1;
    $lifetimes = array('never', 'save', 'now', 'hourly', 'daily', 'weekly', 'monthly');
    foreach($lifetimes as $lifetime) {
      $field->addOption($lifetime, $lifetime);
    }
    $fields->append($field);

    $help = $modules->get('InputfieldMarkup');
    $link = $modules->get(self::MODULE)->clearCache();
    $helpContent = '<p class="notes">' . __('You could clear the cache by clicking the following link: ') . $link . '</p>';
    $help->value = $helpContent;
    $fields->append($help);

    return $fields;
  }

 /**
   * Initialize the module
   * Initialize a new web contact form
   *
   * Implementation of the Module interface
   *
   * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
   * when ProcessWire's API is ready. As a result, this is a good place to attach hooks.
   *
   * @see http://processwire.com/apigen/class-Module.html
   *
   * @param Template $template Template object holding the form's fields.
   *
   */
  public function init() {
    $this->addHookAfter('Modules::saveModuleConfigData', $this, 'clearModuleCache');
  }

  /**
   * Hook
   *
   * @param HookEvent $event
   */
  public function clearModuleCache($event) {
    $this->clearCacheNow();
  }

  /**
   * Get the most recent media published by a user
   *
   * To get the most recent media published by the owner of the access token,
   * you can use self instead of the username.
   *
   * @param string $username
   * @return array
   */
  public function getRecentMedia($username = '') {
    if ($username) $this->username = $username;
    $json = $this->cache->get($this->getCacheKey('recentmedia', $this->username));

    if (!$json || $this->cacheExpire === 'never') {
      $request = array(
        'access_token' => $this->accessToken,
        'count' => $this->imageCount
      );

      $userId = $this->getUserIdByUsername($this->username);
      $url = !empty($userId) ? str_replace('self', $userId, self::API_URL_FEED) : self::API_URL_FEED;

      $jsonResponse = $this->sendRequest($request, $url, $this->username);
      if ($jsonResponse) $json = $jsonResponse;
    }

    return $json;
  }

  /**
   * Get a list of recently tagged media
   *
   * @param string $tag
   * @return array
   */
  public function getRecentMediaByTag($tag = 'processwire') {
    $json = $this->cache->get($this->getCacheKey('recentmediabytag', $tag));

    if (!$json || $this->cacheExpire === 'never') {
      $request = array(
        'access_token' => $this->accessToken,
        'count' => $this->imageCount
      );

      $url = str_replace('%s', $tag, self::API_URL_SEARCH_TAGS);
      $jsonResponse = $this->sendRequest($request, $url, $tag, 'recentmediabytag');
      if ($jsonResponse) $json = $jsonResponse;
    }

    return $json;
  }

  /**
   * Get a list of recent comments on a media object.
   *
   * @param array $media
   * @return array
   */
  public function getRecentComments($media = null) {
    // no media array ? quit
    if (!$media) return array();

    $mediaId = $media['id'];
    $commentsCount = $media['comments']['count'];

    // no media ID or no comments ? quit
    if (!$mediaId || $commentsCount === 0) return array();

    $json = $this->cache->get($this->getCacheKey("mediacomment$mediaId", $mediaId));

    if (!$json || $this->cacheExpire === 'never') {
      $request = array(
        'access_token' => $this->accessToken,
        'scope' => 'public_content'
      );

      $url = str_replace('%s', $mediaId, self::API_URL_MEDIA_COMMENT);
      $jsonResponse = $this->sendRequest($request, $url, $mediaId, "mediacomment$mediaId");
      if ($jsonResponse) $json = $jsonResponse;
    }

    return $json;
  }

  /**
   * Send request and cache the result
   *
   * @param array $request
   * @param string $url
   * @param string $constraint
   * @param strong $cacheKey
   * @return json
   */
  protected function sendRequest($request, $url, $constraint, $cacheKey = 'recentmedia') {
    $connection = new WireHttp;
    $data = $connection->getJson($url, true, $request);

    if (!empty($data) && $data['meta']['code'] === 200) {
      $expire = constant('ProcessWire\WireCache::expire' . ucfirst($this->cacheExpire));
      $json = $data['data'];
      $this->cache->save($this->getCacheKey($cacheKey, $constraint), $json, $expire);
    } else {
      $this->log->save('errors', "[InstagramFeed]: No data was received for '$constraint' ($cacheKey).");
    }

    return isset($json) ? $json : '';
  }

  /*
   * Search for a user by name
   * return user id
   *
   * @param string $username
   * @return int
   */
  public function getUserIdByUsername($username = null) {
    $connection = new WireHttp;

    $request = array(
      'access_token' => $this->accessToken,
      'q' => $username
    );

    $data = $connection->getJson(self::API_URL_SEARCH, true, $request);

    $userId = null;
    if (!empty($data) && $data['meta']['code'] === 200 && isset($data['data'][0])) {
      $userId = $data['data'][0]['id'];
    } else {
      $this->log->save('errors', "[InstagramFeed]: No user '$username' was found.");
    }

    return $userId;
  }

  /*
   * Request the access_token
   *
   * Now you need to exchange the code for an access token.
   * You simply have to POST this code,
   * along with some app identification parameters.
   *
   * @param string $redirect
   */
  public function getAccessToken($redirect) {
    $connection = new WireHttp;

    $request = array(
      'client_id' => $this->clientId,
      'client_secret' => $this->clientSecret,
      'grant_type' => 'authorization_code',
      'redirect_uri' => $redirect,
      'code' => $this->input->get->code
    );

    $data = $connection->post(self::API_URL_ACCESS_TOKEN, $request);

    if ($data) {
      $result = json_decode($data, true);

      if ($result['access_token']) {
        $data = $this->modules->getModuleConfigData(self::MODULE);
        $data['accessToken'] = $result['access_token'];
        wire('modules')->saveModuleConfigData(self::MODULE, $data);
      } else {
        $this->log->save('errors', "[InstagramFeed]: No access token could be received.");
      }
    }
  }

  /**
   * Request the code
   *
   * Server-side flow (recommended):
   * Redirect the user to a URI of your choice.
   * Take the provided code parameter
   * and exchange it for an access_token
   * by POSTing the code to our access_token url.
   *
   * @return string
   */
  public function getCode() {
    $redirect = $this->getCurrentUri();

    // complete module edit link
    if ($this->page->template == "admin" && $this->input->get->code) {
      $this->getAccessToken($redirect);
      $this->session->redirect($redirect);
    }

    if (!empty($this->clientId)) {
      $request = array(
        'client_id' => $this->clientId,
        'redirect_uri' => $redirect,
        'response_type' => 'code',
        'scope' => 'public_content'
      );

      if ($this->user->isSuperuser()) {
        $href = self::API_URL_AUTHORIZE . '?' . http_build_query($request);
        $link = "<a href='$href'>" . __('get Access Token') . "</a>";
      }
    }

    return isset($link) ? $link : '';
  }

  /*
   * Set Image Count
   *
   * @param integer $param
   * @return $this
   */
  public function setImageCount($imageCount = 4) {
    $this->imageCount = (int)$imageCount;
    return $this;
  }

  /*
   * Get current URI
   *
   * @param string $param
   * @return string
   */
  private function getCurrentUri($param = '') {
    $http = $this->config->https ? 'https://' : 'http://';
    $uri = $http . $this->config->httpHost . $this->page->url;

    // complete module edit link
    if ($this->page->template == "admin") {
      $uri .= 'edit?name=' . self::MODULE;
      if ($param) $uri .= "&$param";
    }

    return $uri;
  }

  /*
   * clear module cache
   */
  private function clearCache() {
    $link = '';
    if ($this->user->isSuperuser()) {
      $href = $this->getCurrentUri('clearCache=true');
      $link = "<a href='$href'>" . __('clear module cache') . "</a>";

      if ($this->input->get->clearCache === "true") {
        $this->clearCacheNow();
        $this->session->redirect($this->getCurrentUri());
      }
    }

    return isset($link) ? $link : '';
  }

  /*
   * clear module cache – now!
   */
  private function clearCacheNow() {
      $allCaches = $this->cache->get($this->getCacheKey() . '*');
      foreach ($allCaches as $k => $v) $this->cache->delete($k);
      $this->message("[InstagramFeed]: All module caches have been deleted.", Notice::debug);
  }

  /**
   * Get cache key
   *
   * @param string $function
   * @param string $param
   * @return string
   */
  private function getCacheKey($function = '', $param = '') {
    $p = empty($param) ? '' : "--$param";
    $module = strtolower(self::MODULE);
    return "module.{$module}-{$function}{$p}";
  }

}
